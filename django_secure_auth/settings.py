"""
Django settings for django_secure_auth project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path
import os
from decouple import config

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

TEMPLATES_DIR = os.path.join(BASE_DIR, "templates")
STATIC_DIR = os.path.join(BASE_DIR, "static")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")
# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = config("DEBUG")

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
]

# install other apps 
INSTALLED_APPS += [
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "drf_spectacular",
    "drf_spectacular_sidecar",
]

# install created apps
INSTALLED_APPS += [
    "accounts",
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_secure_auth.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [TEMPLATES_DIR],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'django_secure_auth.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'Asia/Dhaka'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'
STATICFILES_DIRS = [STATIC_DIR]
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")


# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'





"""<------------set your won logic--------------->"""

# Frontend Url
FRONTEND_URL = "http://127.0.0.1:8000"



# configure Media Root or Media URL
MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")



# configure custom user model
AUTH_USER_MODEL = "accounts.CustomUser"

# rest_framework settings or configurations
from config.drf_settings import REST_FRAMEWORK
REST_FRAMEWORK = REST_FRAMEWORK



# spectacular configure
from config.spectacular_settings import SPECTACULAR_SETTINGS
SPECTACULAR_SETTINGS = SPECTACULAR_SETTINGS


# Logger config
from config.logging import LOGGING
LOGGING = LOGGING



# email config
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = config("EMAIL_HOST")
EMAIL_PORT = config("EMAIL_PORT", cast=int)
EMAIL_USE_TLS = config("EMAIL_USE_TLS", cast=bool)
EMAIL_HOST_USER = config("EMAIL_HOST_USER")
EMAIL_HOST_PASSWORD = config("EMAIL_HOST_PASSWORD")




# Simple JWT token config
from config.jwt_config import SIMPLE_JWT
SIMPLE_JWT = SIMPLE_JWT


"""CSRF Configure"""
from config.csrf_config import *
CSRF_COOKIE_NAME = CSRF_COOKIE_NAME
CSRF_COOKIE_HTTPONLY = CSRF_COOKIE_HTTPONLY   # JavaScript theke access korte caile False
CSRF_HEADER_NAME = CSRF_HEADER_NAME
CSRF_USE_SESSIONS = CSRF_USE_SESSIONS
CSRF_COOKIE_AGE = CSRF_COOKIE_AGE


"""reset password url lifetime"""
PASSWORD_RESET_TIMEOUT = 60*30 # akhne secund akare value nei 10==10s 




"""postgresql database connect"""
from config.postgresql_config import DATABASES
DATABASES = DATABASES


"""Redis Configure"""
from config.redis_config import CACHES
CACHES = CACHES



"""RabbitMQ Or Celery Configure"""
from config.celery_config import *
CELERY_BROKER_URL = CELERY_BROKER_URL
CELERY_ACCEPT_CONTENT = CELERY_ACCEPT_CONTENT
CELERY_TASK_SERIALIZER = CELERY_TASK_SERIALIZER
CELERY_RESULT_SERIALIZER = CELERY_RESULT_SERIALIZER
CELERY_TIMEZONE = CELERY_TIMEZONE

# config auto delete inactive or unverified users 
CELERY_BEAT_SCHEDULE = CELERY_BEAT_SCHEDULE